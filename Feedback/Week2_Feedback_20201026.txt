Starting code feedback for Elin, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.92 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week3, .git, Feedback, Week1, Week2

Found the following files in parent directory: README.md, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~ 
*.tmp

#Sandbox folder
# */Sandbox/*
# */Sandbox

#Images
*.png
*.tif
*.jpg
*.gif
*.bmp
*.psd

#Videos
*.mp4
*.mkv
*.avi
*.mov
*.mpg
*.vob

#Audio
*.mp3
*.aac
*.wav
*.flac

#Documents
*.pdf
*.doc
*.docx
*.xls
*.xlsx
*.ppt
*.pptx
*.odt

#Archive
*.zip
*.rar
*.7z
*.tar
*.iso
*.gz

#Database
*.mdb
*.accde
*.frm
*.sqlite

#Executable
*.exe
*.dll
*.so
*.class

#Custom
__pycache__
*.pyc
*.pyo
*.aux
*.log
.idea

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
## CMEE Coursework Repository

This repository contains all Coursework for the Imperial College London course "MSc Computational Ecology and Evolution" 2020-21.

**Languages:**
- Bash (version 3.2.57(1))
- Python (version 3.6.3)
- R (version 3.4.2)
- C

### Dependencies: 

**Bash**
- imagemagick
- evince

**Python**
- pandas

### Project structure

Project is split into Week directories (eg. Week1, Week2) which contains coursework and scripts for that week.

**Author:** Elin Falla, ef16@ic.ac.uk

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: Week1, Week2, Week3

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: Data, Code, Results, Sandbox

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
## Week 2 Content

This week we covered:
- Intro to Python
- Python input and output
- For loops vs list comprehensions
- Variable scope (global variables)
- Debugging in Python

**Language(s):** Python - version 3.6.3

**Dependencies:** No package dependencies

### Project structure

4 directories:
- **Code** - python scripts (see 'File descriptions' section)
- **Data** - data that some scripts are run on
- **Results** - results eg. data manipulation outputs (note: empty)
- (Local repo also contains **Sandbox** with test files)

### File descriptions

- **Align_seqs.py** - Finds the best alignment of two DNA sequences - ie. the alignment with the most matched bases
- **Basic_csv.py** - Reads a csv file and both prints it to the console and writes select data to a new file
- **Basic_io1.py** - Opens and reads a test file, both with and without blank lines
- **Basic_io2.py** - Creates a file and writes a list to it
- **Basic_io3.py** - Uses package 'pickle' to save an object and reload it
- **Boilerplate.py** - Basic boilerplate script demonstrating use of "main" function
- **Cfexercises1.py** - Some functions that sort or manipulate number inputs
- **Cfexercises2.py** - Some while and for loops that print 'hello' if a particular numerical expression is true
- **Control_flow.py** - Some functions exemplifying the use of control statements
- **Debugme.py** - An intentionally buggy function that demonstrates use of try and except
- **Dictionary.py** - Populates a dictionary with taxa dataset so that it maps order names to sets of taxa
- **Lc1.py** - Contains list comprehensions and for loops to create separate lists containing the latin names, common names, and body masses of birds from a birds database
- **Lc2.py** - Contains list comprehensions and for loops to manipulate UK rainfall data
- **Loops.py** - Some for and while loops that print various numerical/list manipulations
- **Oaks.py** - Defines a function that finds oak species from a dataset and uses for loops and list comprehensions to print them in a list
- **Scope.py** - Functions that demonstrate the scope of global and local variables in different contexts
- **Sysargv.py** -Demonstrates how to use 'sys' package
- **Test_control_flow.py** - Demonstrates the use of 'doctest' package
- **Tuple.py** - Prints the output of a 'birds' dataset by species, showing latin name, common name and body mass
- **Using_name.py** - Demonstrates how (\_\_name\_\_ == "\_\_main\_\_") works

**********************************************************************

Found following files in results directory: Alignment_output.txt...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

 0.5 pts deducted per results file 

Current Points = 99.5

Found 20 code files: Test_control_flow.py, Basic_io2.py, Lc2.py, Debugme.py, Control_flow.py, Cfexercises2.py, Boilerplate.py, Basic_csv.py, Basic_io1.py, Align_seqs.py, Sysargv.py, Scope.py, Lc1.py, Basic_io3.py, Using_name.py, Dictionary.py, Tuple.py, Loops.py, Cfexercises1.py, Oaks.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file Test_control_flow.py...

File contents are:

**********************************************************************
#!usr/bin/env python3

"""A function exemplifying the use of 'doctest' package'"""

__appname__ = 'Test_control_flow.py'
__author__ = 'Elin Falla (ef16@ic.ac.uk)'
__version__ = '0.0.1'

# Imports #
import sys
import doctest  # Import doctest module


# Functions #
def even_or_odd(x=0):  # if not specified, x should take value 0 (prevent error message)
    """Find whether a number x is even or odd.

    >>> even_or_odd(10)
    '10 is Even!'

    >>> even_or_odd(5)
    '5 is Odd!'

    whenever a float is provided, use closest integer:
    >>> even_or_odd(3.2)
    '3 is Odd!'

    in case of negatives, the positive is taken:
    >>> even_or_odd(-2)
    '-2 is Even!'
    """

    # Define function to be tested
    if x % 2 == 0:
        return "%d is Even!" % x
    return "%d is Odd!" % x


def main(argv):
    """Main entry point of the program"""
    print(even_or_odd(22))
    print(even_or_odd(33))
    return 0


if __name__ == "__main__":
    """Makes sure the "main" function is called from command line"""
    status = main(sys.argv)
    sys.exit(status)

doctest.testmod() #To run with embedded tests




**********************************************************************

Testing Test_control_flow.py...

Test_control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!

**********************************************************************

Code ran without errors

Time consumed = 0.14404s

======================================================================
Inspecting script file Basic_io2.py...

File contents are:

**********************************************************************
#!usr/bin/env python3

"""Script that creates a file and writes a list of numbers to it."""

__appname__ = 'Basic_io2.py'
__author__ = 'Elin Falla (ef16@ic.ac.uk)'
__version__ = '0.0.1'


####################
# FILE OUTPUT
####################

# Save the elements of a list to a file
list_to_save = range(100)

f = open('../Data/Testout.txt', 'w')  # w = write
for i in list_to_save:
    f.write(str(i) + '\n')  # Add a new line at the end

f.close()

**********************************************************************

Testing Basic_io2.py...

Basic_io2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.07365s

======================================================================
Inspecting script file Lc2.py...

File contents are:

**********************************************************************
#!usr/bin/env python3

"""Script that contains list comprehensions and for loops to manipulate UK rainfall data to:
(1) create a list of month,rainfall tuples where the amount of rain was >100m
(2) create a list of months where the amount of rain was <50mm."""

__appname__ = 'Lc2.py'
__author__ = 'Elin Falla (ef16@ic.ac.uk)'
__version__ = '0.0.1'

# Data #

# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
print("LIST COMPREHENSIONS")

high_rainfall = [month for month in rainfall if month[1] > 100] #month[1] refers to the number in each tuple
print("Months and rainfall values when the amount of rain was greater than \
100mm:\n", high_rainfall)

# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm.

low_rainfall = [month[0] for month in rainfall if month[1] < 50]
print("Months when the amount of rain was less than 50mm:\n", low_rainfall)

#Print new line between list comprehensions and for loops
print("\n")

# (3) Now do (1) and (2) using conventional loops (you can choose to do
# this before 1 and 2 !).

print("FOR LOOPS")

high_rainfall = []
for month in rainfall:
    if month[1] > 100:
        high_rainfall.append(month)
print("Months and rainfall values when the amount of rain was greater than \
100mm:\n", high_rainfall)

low_rainfall = []
for month in rainfall:
    if month[1] < 50:
        low_rainfall.append(month[0])
print("Months when the amount of rain was less than 50mm:\n", low_rainfall)


# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.

**********************************************************************

Testing Lc2.py...

Lc2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
LIST COMPREHENSIONS
Months and rainfall values when the amount of rain was greater than 100mm:
 [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
Months when the amount of rain was less than 50mm:
 ['MAR', 'SEP']


FOR LOOPS
Months and rainfall values when the amount of rain was greater than 100mm:
 [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
Months when the amount of rain was less than 50mm:
 ['MAR', 'SEP']

**********************************************************************

Code ran without errors

Time consumed = 0.06992s

======================================================================
Inspecting script file Debugme.py...

File contents are:

**********************************************************************
#!usr/bin/ env python3

""" An intentionally buggy function that demonstrates use of try and except."""

__appname__ = 'Debugme.py'
__author__ = "Elin Falla (ekf16@ic.ac.uk)"
__version__ = "0.0.1"


def buggyfunc(x):
    """A function that tries dividing two integers and prints an error message if not possible (ie. dividing by 0)."""
    y = x
    for i in range(x):
        try:
            y = y - 1
            z = x / y
        except:
            print(f"This didn't work; x = {x}; y = {y}")
    return z


buggyfunc(20)


# Old debugme.py code
# def makeabug(x):
#     y = x**4
#     z = 0.
#     y = y/z
#     return y
#
# makeabug(25)

**********************************************************************

Testing Debugme.py...

Debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
This didn't work; x = 20; y = 0

**********************************************************************

Code ran without errors

Time consumed = 0.07534s

======================================================================
Inspecting script file Control_flow.py...

File contents are:

**********************************************************************
#!usr/bin/env python3

"""Some functions exemplifying the use of control statements"""

__appname__ = "Control_flow.py"
__author__ = 'Elin Falla (ef16@ic.ac.uk)'
__version__ = '0.0.1'

# Imports #
import sys


# Functions #
def even_or_odd(x=0):  # if not specified, x should take value 0 (prevents error message)
    """Find whether a number x is even or odd."""
    if x % 2 == 0:
        return "%d is Even!" % x
    return "%d is Odd!" % x


def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0:
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else:
        return "No divisor found for %d!" % x
    return "The largest divisor of %d is %d" % (x, largest)


def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x):
        if x % i == 0:
            print("%d is not a prime: %d is a divisor" % (x, i))
            return False
    print("%d is a prime!" % x)
    return True


def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
        if is_prime(i):  # calls previous function
            allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes), x))
    return allprimes


def main(argv):
    """Main entry point of the program: runs the functions"""
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0


if __name__ == "__main__":
    """Makes sure the "main" function is called from command line"""
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing Control_flow.py...

Control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.07336s

======================================================================
Inspecting script file Cfexercises2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

""" Some while and for loops that print 'hello' if a particular numerical expression is true."""

__appname__ = 'Cfexercises2.py'
__author__ = "Elin Falla (ekf16@ic.ac.uk)"
__version__ = "0.0.1"


for j in range(12):
    if j % 3 == 0:  # if j is a multiple of 3
        print('hello')

for j in range(15):
    if j % 5 == 3:
        print('hello')
    elif j % 4 == 3:
        print('hello')

z = 0
while z != 15:
    print('hello')
    z = z + 3

z = 12
while z < 100:
    if z == 31:
        for k in range(7):
            print('hello')
    elif z == 18:
        print('hello')
    z = z + 1

**********************************************************************

Testing Cfexercises2.py...

Cfexercises2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello

**********************************************************************

Code ran without errors

Time consumed = 0.08566s

======================================================================
Inspecting script file Boilerplate.py...

File contents are:

**********************************************************************
#!usr/bin/env python3

"""Basic boilerplate script demonstrating use of "main" function"""

__appname__ = 'Boilerplate.py'
__author__ = 'Elin Falla (ef16@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = 'License for this code/program'

# Imports #
import sys  # module to interface our program with operating system

# Constants #

# Put global constants here


# Functions #
def main(argv):
    """Main entry point of the program"""
    print("This is a boilerplate")
    return 0


if __name__ == "__main__":
    """Makes sure the "main" function is called from command line"""
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing Boilerplate.py...

Boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.10175s

======================================================================
Inspecting script file Basic_csv.py...

File contents are:

**********************************************************************
#!usr/bin/env python3

"""Script that reads a csv file and both prints it to the console and writes select data to a new file."""

__appname__ = 'Basic_csv.py'
__author__ = 'Elin Falla (ef16@ic.ac.uk)'
__version__ = '0.0.1'


# Imports #
import csv

# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (kg)'
f = open('../Data/Testcsv.csv', 'r')

csvread = csv.reader(f)
temp = []
for row in csvread:
    temp.append(tuple(row))
    print(row)
    print("The species is", row[0])

f.close()

# Write a file containing only species name and body mass
f = open('../Data/Testcsv.csv', 'r')
g = open('../Data/Bodymass.csv', 'w')

csvread = csv.reader(f)
csvwrite = csv.writer(g)
for row in csvread:
    print(row)
    csvwrite.writerow([row[0], row[4]])

f.close()
g.close()

**********************************************************************

Testing Basic_csv.py...

Basic_csv.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "Basic_csv.py", line 15, in <module>
    f = open('../Data/Testcsv.csv', 'r')
FileNotFoundError: [Errno 2] No such file or directory: '../Data/Testcsv.csv'

======================================================================
Inspecting script file Basic_io1.py...

File contents are:

**********************************************************************
#!usr/bin/env python3

"""Script that opens and reads a test file, both with and without blank lines."""

__appname__ = 'Basic_io1.py'
__author__ = 'Elin Falla (ef16@ic.ac.uk)'
__version__ = '0.0.1'


#####################
# FILE INPUT
#####################

# Open a file for Reading
f = open('../Data/Test.txt', 'r')

# Use 'implicit' for loop:
# If the object is a file, python will cycle over lines
for line in f:
    print(line)

# Close the file
f.close()

# Same example, skip blank lines
f = open('../Data/Test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()

**********************************************************************

Testing Basic_io1.py...

Basic_io1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
First Line

Second Line



Third Line



Fourth Line

First Line

Second Line

Third Line

Fourth Line


**********************************************************************

Code ran without errors

Time consumed = 0.09709s

======================================================================
Inspecting script file Align_seqs.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Finds the best alignment of two DNA sequences - ie. the alignment with the most matched bases. Writes the
alignment and the number of matches to a file called Alignment_output.txt."""

__appname__ = "Align_seqs.py"
__author__ = "Elin Falla, ef16@ic.ac.uk"
__version__ = "0.0.1"

# Imports #
import pandas as pd
import sys


# Functions #
def string_swap(seq1, seq2):
    """Assign the longer sequence to s1, and the shorter to s2.
    Calculate l1 and l2: l1 is length of the longer sequence, l2 that of the shorter."""
    l1 = len(seq1)
    l2 = len(seq2)
    if l1 >= l2:  # If l1 is already longer than l2, no need to swap strings
        s1 = seq1
        s2 = seq2
    else:  # If l2 is longer than l1, swap the strings and the lengths
        s1 = seq2
        s2 = seq1
        l1, l2 = l2, l1 # swaps the two lengths
    return s1, s2, l1, l2


def calculate_score(s1, s2, l1, l2, startpoint):
    """Calculates a score by returning the number of matches starting
    from arbitrary start point in the sequence (chosen by user)"""
    matched = ""  # to hold string displaying alignments
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]:  # if the bases match
                matched = matched + "*"  # * indicates a match
                score = score + 1
            else:
                matched = matched + "-"  # - indicates no match

    # Formatted output
    print("." * startpoint + matched)  # prints '." times whatever number startpoint is set to, then the matched string
    print("." * startpoint + s2)
    print(s1)
    print(score)
    print(" ")

    return score, matched


def find_best_align(s1, s2, l1, l2):
    """Finds the alignment of two sequences that gives the best match (highest score)"""

    my_best_align = None
    my_best_score = -1
    my_best_match = None

    for i in range(l1):  # Note that you just take the last alignment with the highest score
        z, matched = calculate_score(s1, s2, l1, l2, i)
        if z > my_best_score:
            my_best_align = "." * i + s2  # prints number of '.' to get to startpoint (which is i here)
            my_best_score = z
            my_best_match = "." * i + matched

    print(my_best_match)
    print(my_best_align)
    print(s1)
    print("Best score:", my_best_score)

    return my_best_align, my_best_score, my_best_match


def main(argv):
    """Main entry point of the program: reads input file, calculates the best match, and writes it to output file."""

    # Open the csv file with the DNA sequences
    sequences = open("../Data/Sequences.csv", "r")

    # Split the csv file by lines and assign the 2 sequences to variables
    seqs = sequences.read().splitlines()
    seq1 = seqs[0]
    seq2 = seqs[1]

    # Run string_swap to find longer sequence
    s1, s2, l1, l2 = string_swap(seq1, seq2)

    # Run find_best_align to find best alignment of sequences
    my_best_align, my_best_score, my_best_match = find_best_align(s1, s2, l1, l2)

    # Write result to an output file called 'Alignment_output.txt'
    output_file = open("../Results/Alignment_output.txt", "w+")
    output_file.write("%s\n%s\n%s\nBest score: %s\n" % (my_best_match, my_best_align, s1, my_best_score))

    # Close the input and output files
    sequences.close()
    output_file.close()

    return 0


if __name__ == "__main__":
    """Makes sure the 'main' function is called from the command line."""
    status = main(sys.argv)
    sys.exit(status)

# TODO FOR GROUP EXERCISE
# function that turns fasta input into string
# function that takes in two dna seqs and outputs (my_best_align, s1, my_best_score)
# main that reads files and outputs resulting file
# Have error message for if 0 or 1 files given, if 0 use default

**********************************************************************

Testing Align_seqs.py...

Align_seqs.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
-----*****
CAATTCGGAT
ATCGCCGGATTACGGG
5
 
.------*--*
.CAATTCGGAT
ATCGCCGGATTACGGG
2
 
..*---------
..CAATTCGGAT
ATCGCCGGATTACGGG
1
 
...--------*-
...CAATTCGGAT
ATCGCCGGATTACGGG
1
 
....*---------
....CAATTCGGAT
ATCGCCGGATTACGGG
1
 
.....*---*-----
.....CAATTCGGAT
ATCGCCGGATTACGGG
2
 
......--***--*--
......CAATTCGGAT
ATCGCCGGATTACGGG
4
 
.......-*-*-***-
.......CAATTCGGAT
ATCGCCGGATTACGGG
5
 
........------**
........CAATTCGGAT
ATCGCCGGATTACGGG
2
 
.........--*---*
.........CAATTCGGAT
ATCGCCGG
**********************************************************************

Code ran without errors

Time consumed = 1.07141s

======================================================================
Inspecting script file Sysargv.py...

File contents are:

**********************************************************************
#!usr/bin/env python3

"""Script that demonstrates how to use sys package."""

__appname__ = 'Sysargv.py'
__author__ = 'Elin Falla (ef16@ic.ac.uk)'
__version__ = '0.0.1'

# Imports #
import sys

print("This is the name of the script:", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: ", str(sys.argv))

**********************************************************************

Testing Sysargv.py...

Sysargv.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
This is the name of the script: Sysargv.py
Number of arguments:  1
The arguments are:  ['Sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.11397s

======================================================================
Inspecting script file Scope.py...

File contents are:

**********************************************************************
#!usr/bin/env python3

"""Functions that demonstrate the scope of global and local variables in different contexts."""

__appname__ = 'Scope.py'
__author__ = 'Elin Falla (ef16@ic.ac.uk)'
__version__ = '0.0.1'

# Imports #
import sys


# Functions #
def a_function1():
    """Manipulates global variables and sets local variables for testing scope"""
    _a_global = 5  # a local variable

    if _a_global >= 5:
        _b_global = _a_global + 5  # also a local variable

    _a_local = 4

    print("Inside a_function1, the value of _a_global is ", _a_global)
    print("Inside a_function1, the value of _b_global is ", _b_global)
    print("Inside a_function1, the value of _a_local is ", _a_local)

    return None


def a_function2():
    """Sets a local variable for testing scope"""
    _a_local = 4

    print("Inside a_function2, the value _a_local is ", _a_local)
    print("Inside a_function2, the value of _a_global is ", _a_global)

    return None


def a_function3():
    """Defines a global variable and local variable for testing scope."""
    global _a_global
    _a_global = 5
    _a_local = 4

    print("Inside a_function3, the value of _a_global is ", _a_global)
    print("Inside a_function3, the value _a_local is ", _a_local)

    return None


def a_function4():
    """Sets local variable and defines and runs nested function to test variable scope in nested functions."""
    _a_global = 10

    def _a_function_nested1():
        """Defines a global and local variable to be run within a_function4()."""
        global _a_global
        _a_global = 20

    print("Before calling a_function4, value of _a_global is ", _a_global)

    _a_function_nested1()

    print("After calling _a_function_nested1, value of _a_global is ", _a_global)

    return None


def a_function5():
    "Defines and runs nested function to test variable scope in neste functions."

    def _a_function_nested2():
        "Defines a global and local variable to be run within a_function5()."
        global _a_global
        _a_global = 20

    print("Before calling a_function5, value of _a_global is ", _a_global)

    _a_function_nested2()

    print("After calling _a_function_nested2, value of _a_global is ", _a_global)

    return None


def main(argv):
    """Main entry point of program: runs defined functions and defines global environment for each"""

    # Global constants #
    global _a_global  # a global variable

    # a_function1() environment #
    _a_global = 10
    if _a_global >= 5:
        _b_global = _a_global + 5  # also a global variable
    a_function1()
    print("Outside a_function1, the value of _a_global is ", _a_global)
    print("Outside a_function1, the value of _b_global is ", _b_global)

    print("\n")

    # a_function2() environment #
    _a_global = 10
    a_function2()
    print("Outside a_function2, the value of _a_global is", _a_global)

    print("\n")

    # a_function3() environment #
    _a_global = 10
    print("Outside a_function3, the value of _a_global is", _a_global)
    a_function3()
    print("Outside a_function3, the value of _a_global now is", _a_global)

    print("\n")

    # a_function4() environment #
    a_function4()
    print("The value of a_global in main workspace / namespace of a_function4 is ", _a_global)

    print("\n")

    # a_function5() environment #
    _a_global = 10
    a_function5()
    print("The value of a_global in main workspace / namespace of a_function5 is ", _a_global)

    return 0


if __name__ == "__main__":
    """Ensures main function is called from command line"""
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing Scope.py...

Scope.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
Inside a_function1, the value of _a_global is  5
Inside a_function1, the value of _b_global is  10
Inside a_function1, the value of _a_local is  4
Outside a_function1, the value of _a_global is  10
Outside a_function1, the value of _b_global is  15


Inside a_function2, the value _a_local is  4
Inside a_function2, the value of _a_global is  10
Outside a_function2, the value of _a_global is 10


Outside a_function3, the value of _a_global is 10
Inside a_function3, the value of _a_global is  5
Insi
**********************************************************************

Code ran without errors

Time consumed = 0.12180s

======================================================================
Inspecting script file Lc1.py...

File contents are:

**********************************************************************
#!usr/bin/env python3

"""Script that contains list comprehensions and for loops to create separate lists containing the latin names,
common names, and body masses of birds from a birds database."""

__appname__ = 'Lc1.py'
__author__ = 'Elin Falla (ef16@ic.ac.uk)'
__version__ = '0.0.1'

# Data #
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

# (1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively.

print("LIST COMPREHENSIONS")

# Print latin names of species in birds database (list comprehension)
latin_names = [row[0] for row in birds]
print("Latin names:\n", latin_names)

# Print common names of species in birds database (list comprehension)
common_names = [row[1] for row in birds]
print("Common names:\n", common_names)

# Print mean body masses of species in birds database (list comprehension)
body_masses = [row[2] for row in birds]
print("Mean body masses:\n", body_masses)

# Print new line to separate list comprehensions and for loops
print("\n")

#############################

# (2) Now do the same using conventional loops (you can choose to do this
# before 1 !).

print("FOR LOOPS")

# Print latin names of species in birds database (for loop)
latin_names = []
for row in birds:
    latin_names.append(row[0])
print("Latin names:\n", latin_names)

# Print common names of species in birds database (for loop)
common_names = []
for row in birds:
  common_names.append(row[1])
print("Common names:\n", common_names)

# Print mean body masses of species in birds database (for loop)
body_masses = []
for row in birds:
    body_masses.append(row[2])
print("Mean body masses:\n", body_masses)

# A nice example out out is:
# Step #1:
# Latin names:
# ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
# ... etc.

**********************************************************************

Testing Lc1.py...

Lc1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
LIST COMPREHENSIONS
Latin names:
 ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
Common names:
 ['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
Mean body masses:
 [18.7, 19, 19.5, 19.6, 20.2]


FOR LOOPS
Latin names:
 ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
Common names:
 ['Savannah sparrow', 'House martin', 'Yellow-eye
**********************************************************************

Code ran without errors

Time consumed = 0.12066s

======================================================================
Inspecting script file Basic_io3.py...

File contents are:

**********************************************************************
#!usr/bin/env python3

"""Script that uses pickle to save an object and reload it."""

__appname__ = 'Basic_io3.py'
__author__ = 'Elin Falla (ef16@ic.ac.uk)'
__version__ = '0.0.1'

# Imports #
import pickle

######################
# STORING OBJECTS
######################

# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

f = open('../Data/Testp.p', 'wb')  # b means accepts binary files
pickle.dump(my_dictionary, f)  # write my_dictionary into the file
f.close()

# Load the data again
f = open('../Data/Testp.p', 'rb')  # read, accepts binary files
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)

**********************************************************************

Testing Basic_io3.py...

Basic_io3.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
{'a key': 10, 'another key': 11}

**********************************************************************

Code ran without errors

Time consumed = 0.12938s

======================================================================
Inspecting script file Using_name.py...

File contents are:

**********************************************************************
#!usr/bin/env python3

"""Script that demonstrates how (__name__ == "__main"__) works."""

__appname__ = 'Using_name.py'
__author__ = 'Elin Falla (ef16@ic.ac.uk)'
__version__ = '0.0.1'
# Filename: using_name.py

if __name__ == '__main__':
    print("This program is being run by itself")
else:
    print("I am being imported from another module")

print("This module's name is: " + __name__)

**********************************************************************

Testing Using_name.py...

Using_name.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
This program is being run by itself
This module's name is: __main__

**********************************************************************

Code ran without errors

Time consumed = 0.11792s

======================================================================
Inspecting script file Dictionary.py...

File contents are:

**********************************************************************
#!usr/bin/env python3

"""Script that populates a dictionary with taxa dataset so that it maps order names to sets of taxa."""

__appname__ = 'Dictionary.py'
__author__ = 'Elin Falla (ef16@ic.ac.uk)'
__version__ = '0.0.1'

# Data #
taxa = [('Myotis lucifugus', 'Chiroptera'),
         ('Gerbillus henleyi', 'Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
         ]

# Write a short python script to populate a dictionary called taxa_dic
# derived from  taxa so that it maps order names to sets of taxa.
#
# An example output is:
#
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc.
#  OR,
# 'Chiroptera': {'Myotis lucifugus'} ... etc

# list comprehension (doesn't work): taxa_dic = {row[1]: row[0] for row in taxa if row[1] not in taxa_dic}

taxa_dic = {}
for row in taxa:
    taxa_dic.setdefault(row[1], set()).add(row[0])
print(taxa_dic)

# setdefault creates a new key only if it doesn't exist in the format (key, value)
# setting the value to an empty list when creating the key allows appending of
# multiple values per key

**********************************************************************

Testing Dictionary.py...

Dictionary.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
{'Chiroptera': {'Myotis lucifugus'}, 'Rodentia': {'Mus domesticus', 'Peromyscus crinitus', 'Gerbillus henleyi', 'Cleithrionomys rutilus'}, 'Afrosoricida': {'Microgale talazaci', 'Microgale dobsoni'}, 'Carnivora': {'Arctocephalus gazella', 'Lyacon pictus', 'Canis lupus'}}

**********************************************************************

Code ran without errors

Time consumed = 0.11659s

======================================================================
Inspecting script file Tuple.py...

File contents are:

**********************************************************************
#!usr/bin/env python3

"""Script that prints the output of 'birds' dataset by species, showing latin name, common name and body mass."""

__appname__ = 'Tuple.py'
__author__ = 'Elin Falla (ef16@ic.ac.uk)'
__version__ = '0.0.1'

# Data #
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by species
#
# A nice example output is:
#
# Latin name: Passerculus sandwichensis
# Common name: Savannah sparrow
# Mass: 18.7
# ... etc.

# Hints: use the "print" command! You can use list comprehensions!

for row in birds:
    print("Latin name:", row[0],
        "\nCommon name:", row[1],
        "\nMass:", row[2], "\n")

# data = "".join([str("Latin name:%s\nCommon name:%s\nMass:%s\n\n") % (row[0], row[1], row[2]) for row in birds])
# print(data)

**********************************************************************

Testing Tuple.py...

Tuple.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
Latin name: Passerculus sandwichensis 
Common name: Savannah sparrow 
Mass: 18.7 

Latin name: Delichon urbica 
Common name: House martin 
Mass: 19 

Latin name: Junco phaeonotus 
Common name: Yellow-eyed junco 
Mass: 19.5 

Latin name: Junco hyemalis 
Common name: Dark-eyed junco 
Mass: 19.6 

Latin name: Tachycineata bicolor 
Common name: Tree swallow 
Mass: 20.2 


**********************************************************************

Code ran without errors

Time consumed = 0.11937s

======================================================================
Inspecting script file Loops.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

""" Some for and while loops that print various numerical/list manipulations."""

__appname__ = 'Loops.py'
__author__ = "Elin Falla (ekf16@ic.ac.uk)"
__version__ = "0.0.1"


# FOR loops in python #

# Prints 0-4
for i in range(5):
    print(i)

# Prints out list
my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

# Prints 0, 1, 12, 123, 1234
total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loops in python #

# Prints all numbers from 1 to 100
z = 0
while z < 100:
    z = z + 1
    print(z)

# Creates infinite while loop
b = True
while b:
    print("GERONIMO! infinite loop!")

**********************************************************************

Testing Loops.py...

Loops.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
GERONIMO! infinite loop!
GERONIMO! infinite loop!
GERONIMO! infinite loop!
GERONIMO! infinite loop!
GERONIMO! infinite loop!
GERONIMO! infinite loop!
GERO
**********************************************************************

Code ran without errors

Time consumed = 10.32629s

======================================================================
Inspecting script file Cfexercises1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

""" Some functions that sort or manipulate number inputs"""

__appname__ = 'Cfexercises1.py'
__author__ = "Elin Falla (ekf16@ic.ac.uk)"
__version__ = "0.0.1"

# Imports #
import sys


# Functions #
def foo_1(x=9):  # if not specified, x will take the value 9
    """Raises a number to the power of 0.5"""
    y = x ** 0.5
    return "The square root of %d is %f" % (x, y)


def foo_2(x=5, y=4):
    """Returns the larger of two number inputs"""
    if x > y:
        return "%d is larger than %d" % (x, y)
    return "%d is larger than %d" % (y, x)


def foo_3(x=4, y=10, z=5):
    """Puts the 3 numbers in size order, starting with the smallest (unless
    the smallest number is at the end, in which case it just moves the
    largest to the end)"""
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return "%d, %d < %d" % (x, y, z)


def foo_4(x=5):
    """Calculates factorial of a number (using for loop)"""
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return "The factorial of %d is %d" % (x, result)


def foo_5(x=5):
    """Recursive function that calculates factorial of a number"""
    if x == 1:
        return 1
    return x * foo_5(x - 1)


def foo_6(x=5):
    """Calculates factorial of a number (using while loop)"""
    facto = 1
    foo_6_input = x
    while x >= 1:
        facto = facto * x
        x = x - 1
    return "The factorial of %d is %d" % (foo_6_input, facto)


def main(argv):
    """Main entry point of the program: runs all the foo functions."""
    print(foo_1(15))
    print(foo_2(7, 11))
    print(foo_3(25, 30, 1))
    print(foo_3(30, 25, 1))
    print(foo_3(30, 1, 25))
    print(foo_4(8))

    # For recursive function, print command is outside the function as have no way of knowing result inside function
    foo_5_input = 10
    foo_5_output = foo_5(foo_5_input)
    print("The factorial of %d is %d" % (foo_5_input, foo_5_output))

    print(foo_6(3))

    return 0


if __name__ == "__main__":
    """Makes sure the 'main' function is called from the command line."""
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing Cfexercises1.py...

Cfexercises1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
The square root of 15 is 3.872983
11 is larger than 7
25, 1 < 30
25, 1 < 30
1, 25 < 30
The factorial of 8 is 40320
The factorial of 10 is 3628800
The factorial of 3 is 6

**********************************************************************

Code ran without errors

Time consumed = 0.13628s

======================================================================
Inspecting script file Oaks.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

""" Defines a function that finds oak species from a dataset and uses for loops and list comprehensions to
 print them in a list"""

__appname__ = 'Oaks.py'
__author__ = "Elin Falla (ekf16@ic.ac.uk)"
__version__ = "0.0.1"


# Data #
taxa = [ 'Quercus robur',
        'Fraxinus excelsior',
        'Pinus sylvestris',
        'Quercus cerris',
        'Quercus petraea']


# Functions #
def is_an_oak(name):
    """Finds just those taxa that are oak trees from a list of species"""
    return name.lower().startswith('quercus ')


# Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

# Using list comprehensions
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

# Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())  # .upper() sets to uppercase
print(oaks_loops)

# Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)

**********************************************************************

Testing Oaks.py...

Oaks.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
{'Quercus robur', 'Quercus petraea', 'Quercus cerris'}
{'Quercus robur', 'Quercus petraea', 'Quercus cerris'}
{'QUERCUS PETRAEA', 'QUERCUS ROBUR', 'QUERCUS CERRIS'}
{'QUERCUS PETRAEA', 'QUERCUS ROBUR', 'QUERCUS CERRIS'}

**********************************************************************

Code ran without errors

Time consumed = 0.07722s

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 98.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!