group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
#create_lm_model() %>%
group_modify(create_lm_model(MyDF))
model_result <-
MyDF %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
#create_lm_model() %>%
group_modify(.f = create_lm_model(MyDF))
model_result <- data.frame()
model_result
model_result <-
MyDF %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
#create_lm_model() %>%
group_modify(.f = create_lm_model(MyDF))
anova(lm)
# reg_data <- ggplot_build(p)$data[[2]]
# subset <- reg_data[reg_data$PANEL == 3 & reg_data$group == 4,]
# subsetDF <-MyDF[MyDF$Type.of.feeding.interaction == "" & MyDF$Predator.lifestage == 4,]
lm <- lm(y~x, data = subset)
anova(lm)
poo <- anova(lm)
create_lm_model <- function(data) {
model <- lm(Predator.mass ~ Prey.mass, data = data)
anova.res <- anova(model)
model.res <- summary(model)
intercept <- model.res$coefficients[1]
slope <- model.res$coefficients[2]
r_squared <- model.res$r.squared
F_val <- anova.res$`F value`
P_val <- anova.res$`Pr(>F)`
return(c(intercept, slope, r_squared))
}
create_lm_model <- function(data) {
model <- lm(Predator.mass ~ Prey.mass, data = data)
anova.res <- anova(model)
model.res <- summary(model)
intercept <- model.res$coefficients[1]
slope <- model.res$coefficients[2]
r_squared <- model.res$r.squared
F_val <- anova.res$`F value`
P_val <- anova.res$`Pr(>F)`
return(c(intercept, slope, r_squared, F_val, P_val))
}
model_result <- data.frame()
model_result <-
MyDF %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
group_modify(.f = create_lm_model(MyDF))
poo$`Pr(>F)`
poo$`F value`
poo
poo$`F value`[1]
poo$`Pr(>F)`
poo$`Pr(>F)`[1]
poo$`Pr(>F)`[22]
poo$`Pr(>F)`[2]
poo$`Pr(>F)`[[1]]
summary(lm)
poop <- summary(lm)
poop$r.squared
create_lm_model <- function(data) {
model <- lm(Predator.mass ~ Prey.mass, data = data)
anova.res <- anova(model)
model.res <- summary(model)
intercept <- model.res$coefficients[1]
slope <- model.res$coefficients[2]
r_squared <- model.res$r.squared
F_val <- anova.res$`F value`[1]
P_val <- anova.res$`Pr(>F)`[1]
return(c(intercept, slope, r_squared, F_val, P_val))
}
model_result <- data.frame()
model_result <-
MyDF %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
group_modify(.f = create_lm_model(MyDF))
file.edit("GPDD_Data.R")
?load
data <- load("../Data/GPDDFiltered.RData")
?map
require(maps)
?maps::map
map(database = "world")
View(gpdd)
points(x=gpdd$long,y=gpdd$lat,col='red',cex=0.75)
#draw world map
plot <- map(database = "world")
#draw world map
map(database = "world")
points(x=gpdd$long,y=gpdd$lat,col='blue',cex=0.75)
points(x=gpdd$long,y=gpdd$lat, col='blue',cex=0.75, pch = 4)
points(x=gpdd$long,y=gpdd$lat, col='blue',cex=0.75, pch = 3)
#draw world map
map(database = "world")
points(x=gpdd$long,y=gpdd$lat, col='blue',cex=0.75, pch = 3)
#draw world map
map(database = "world")
points(x=gpdd$long,y=gpdd$lat, col='blue',cex=0.75, pch = 2)
#draw world map
map(database = "world")
points(x=gpdd$long,y=gpdd$lat, col='blue',cex=0.75, pch = 1)
#draw world map
map(database = "world")
points(x=gpdd$long,y=gpdd$lat, col='blue',cex=0.75, pch = 5)
#draw world map
map(database = "world")
points(x=gpdd$long,y=gpdd$lat, col='blue',cex=0.75, pch = 6)
#draw world map
map(database = "world")
points(x=gpdd$long,y=gpdd$lat, col='blue',cex=0.75, pch = 4)
#draw world map
map(database = "world")
points(x=gpdd$long,y=gpdd$lat, col='blue',cex=1, pch = 4)
#draw world map
map(database = "world")
points(x=gpdd$long,y=gpdd$lat, col='blue',cex=1, pch = 19)
#draw world map
map(database = "world")
points(x=gpdd$long,y=gpdd$lat, col='blue',cex=1, pch = 16)
install.packages("ggthemes")
p <- ggplot(MyDF, aes(x = log(Predator.mass), y = log(Prey.mass),
colour = Type.of.feeding.interaction )) +
geom_point(size=I(2), shape=I(10)) + theme_bw()
p + geom_rangeframe() + # now fine tune the geom to Tufte's range frame
theme_tufte() # and theme to Tufte's minimal ink theme
require("ggthemes")
p <- ggplot(MyDF, aes(x = log(Predator.mass), y = log(Prey.mass),
colour = Type.of.feeding.interaction )) +
geom_point(size=I(2), shape=I(10)) + theme_bw()
p + geom_rangeframe() + # now fine tune the geom to Tufte's range frame
theme_tufte() # and theme to Tufte's minimal ink theme
p
file.edit("Apply1.R")
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/Apply1.R', echo=TRUE)
file.edit("Apply2.R")
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/Apply2.R', echo=TRUE)
file.edit("Basic_io.R")
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/Basic_io.R', echo=TRUE)
file.edit("Basic_plotting.R")
file.edit("Basic_plotting.R")
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/Basic_plotting.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/Basic_plotting.R', echo=TRUE)
file.edit("Boilerplate.R")
file.edit("Break.R")
file.edit("Next.R")
?mutate_if
file.edit("Browse.R")
file.edit("Control_flow.R")
file.edit("DataWrang.R")
file.edit("DataWrangTidy.R")
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/DataWrangTidy.R', echo=TRUE)
rownames_to_column()
?rownames_to_column
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/GPDD_Data.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/GPDD_Data.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/GPDD_Data.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/GPDD_Data.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/GPDD_Data.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/GPDD_Data.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/GPDD_Data.R', echo=TRUE)
#remove everything
rm(list=ls())
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/GPDD_Data.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/GPDD_Data.R', echo=TRUE)
getwd()
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/GPDD_Data.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/GPDD_Data.R', echo=TRUE)
View(gpdd)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/GPDD_Data.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/GPDD_Data.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/GPDD_Data.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/GPDD_Data.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/PP_Regress.R', echo=TRUE)
create_lm_model <- function(data) {
model <- lm(Predator.mass ~ Prey.mass, data = data)
anova.res <- anova(model)
model.res <- summary(model)
intercept <- model.res$coefficients[1]
slope <- model.res$coefficients[2]
r_squared <- model.res$r.squared
F_val <- anova.res$`F value`[1]
P_val <- anova.res$`Pr(>F)`[1]
return(c(intercept, slope, r_squared, F_val, P_val))
}
model_result <- data.frame()
model_result <-
MyDF %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
group_modify(.f = create_lm_model(.))
?reshape
?reshape2
create_lm_model <- function(data) {
model <- lm(Predator.mass ~ Prey.mass, data = data)
anova.res <- anova(model)
model.res <- summary(model)
intercept <- model.res$coefficients[1]
slope <- model.res$coefficients[2]
r_squared <- model.res$r.squared
F_val <- anova.res$`F value`[1]
P_val <- anova.res$`Pr(>F)`[1]
outputDF <- data.frame(intercept = intercept,
slope = slope,
r_squared = r_squared,
F_val = F_val,
P_val = P_val)
return(outputDF)
}
model_result <- data.frame()
model_result <-
MyDF %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
group_modify(.f = create_lm_model(.))
?group_modify
?as_tibble
model_result <- data.frame()
model_result <-
MyDF %>%
as_tibble() %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
group_modify(.f = create_lm_model(.))
create_lm_model <- function(data) {
model <- lm(Predator.mass ~ Prey.mass, data = data)
anova.res <- anova(model)
model.res <- summary(model)
intercept <- model.res$coefficients[1]
slope <- model.res$coefficients[2]
r_squared <- model.res$r.squared
F_val <- anova.res$`F value`[1]
P_val <- anova.res$`Pr(>F)`[1]
outputDF <- data.frame(intercept = intercept,
slope = slope,
r_squared = r_squared,
F_val = F_val,
P_val = P_val)
#return(outputDF)
}
model_result <- data.frame()
model_result <-
MyDF %>%
as_tibble() %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
group_modify(.f = create_lm_model(.))
create_lm_model <- function(data) {
model <- lm(Predator.mass ~ Prey.mass, data = data)
anova.res <- anova(model)
model.res <- summary(model)
intercept <- model.res$coefficients[1]
slope <- model.res$coefficients[2]
r_squared <- model.res$r.squared
F_val <- anova.res$`F value`[1]
P_val <- anova.res$`Pr(>F)`[1]
outputDF <- data.frame(intercept = intercept,
slope = slope,
r_squared = r_squared,
F_val = F_val,
P_val = P_val)
return(outputDF)
}
model_result <- data.frame()
model_result <-
MyDF %>%
as_tibble() %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
group_modify(.f = create_lm_model(.))
debugSource('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/PP_Regress.R', echo=TRUE)
create_lm_model <- function(data) {
model <- lm(Predator.mass ~ Prey.mass, data = data)
anova.res <- anova(model)
model.res <- summary(model)
intercept <- model.res$coefficients[1]
slope <- model.res$coefficients[2]
r_squared <- model.res$r.squared
F_val <- anova.res$`F value`[1]
P_val <- anova.res$`Pr(>F)`[1]
outputDF <- data.frame(intercept = intercept,
slope = slope,
r_squared = r_squared,
F_val = F_val,
P_val = P_val)
return(outputDF)
}
model_result <- data.frame()
model_result <-
MyDF %>%
as_tibble() %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
group_modify(~ create_lm_model(.))
head(model_result)
View(model_result)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/PP_Regress.R', echo=TRUE)
View(model_result)
write_csv(model_result, "../Results/PP_Regress_Results.csv")
View(model_result)
?glance
# reg_data <- ggplot_build(p)$data[[2]]
# subset <- reg_data[reg_data$PANEL == 3 & reg_data$group == 4,]
# subsetDF <-MyDF[MyDF$Type.of.feeding.interaction == "" & MyDF$Predator.lifestage == 4,]
lm <- lm(y~x, data = subset)
glance(lm(Predator.mass ~ Prey.mass, data = MyDF))
?qplot
create_lm_model <- function(data) {
model <- lm(log10(Predator.mass) ~ log10(Prey.mass, data) = data)
anova.res <- anova(model)
model.res <- summary(model)
intercept <- model.res$coefficients[1]
slope <- model.res$coefficients[2]
r_squared <- model.res$r.squared
F_val <- anova.res$`F value`[1]
P_val <- anova.res$`Pr(>F)`[1]
outputDF <- data.frame(intercept = intercept,
slope = slope,
r_squared = r_squared,
F_val = F_val,
P_val = P_val)
return(outputDF)
}
create_lm_model <- function(data) {
model <- lm(log10(Predator.mass) ~ log10(Prey.mass), data = data)
anova.res <- anova(model)
model.res <- summary(model)
intercept <- model.res$coefficients[1]
slope <- model.res$coefficients[2]
r_squared <- model.res$r.squared
F_val <- anova.res$`F value`[1]
P_val <- anova.res$`Pr(>F)`[1]
outputDF <- data.frame(intercept = intercept,
slope = slope,
r_squared = r_squared,
F_val = F_val,
P_val = P_val)
return(outputDF)
}
model_result <- data.frame()
model_result <-
MyDF %>%
as_tibble() %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
group_modify(~ create_lm_model(.))
write_csv(model_result, "../Results/PP_Regress_Results.csv")
create_lm_model <- function(data) {
model <- lm(log10(Predator.mass) ~ log10(Prey.mass), data = data)
anova.res <- anova(model)
model.res <- summary(model)
intercept <- model.res$coefficients[1]
slope <- model.res$coefficients[2]
r_squared <- model.res$r.squared
F_val <- anova.res$`F value`[1]
P_val <- anova.res$`Pr(>F)`[1]
outputDF <- data.frame(intercept = intercept,
slope = slope,
r_squared = r_squared,
F_val = F_val,
P_val = P_val)
return(outputDF)
}
model_result <- data.frame()
model_result <-
MyDF %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
group_modify(~ create_lm_model(.))
write_csv(model_result, "../Results/PP_Regress_Results.csv")
View(model_result)
# create function that does a linear regression, and outputs regression values into a dataframe
create_lm_model <- function(data) {
model <- lm(log10(Predator.mass) ~ log10(Prey.mass), data = data)
anova.res <- anova(model)
model.res <- summary(model)
# intercept <- model.res$coefficients[1]
# slope <- model.res$coefficients[2]
# r_squared <- model.res$r.squared
# F_val <- anova.res$`F value`[1]
# P_val <- anova.res$`Pr(>F)`[1]
outputDF <- data.frame(intercept = model.res$coefficients[1],
slope = model.res$coefficients[2],
r_squared = model.res$r.squared,
F_val = anova.res$`F value`[1],
P_val = anova.res$`Pr(>F)`[1])
return(outputDF)
}
#initialise dataframe
model_result <- data.frame()
#use piping to group data and perform create_lm_model() on it
model_result <-
MyDF %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
group_modify(~ create_lm_model(.))
View(model_result)
file.edit("GPDD_Data.R")
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/GPDD_Data.R', echo=TRUE)
#plot lat and long of each observation on the map
points(x = gpdd$long, y = gpdd$lat,
col = 'blue',
cex = 1,
pch = 16)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/GPDD_Data.R', echo=TRUE)
file.edit("Girko.R")
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/Girko.R', echo=TRUE)
file.edit("MyBars.R")
file..edit("Next.R")
file.edit("Next.R")
file.edit("PP_Dists.R")
?write_csv
file.edit("PlotLin.R")
file.edit("Preallocate.R")
file.edit("Qplot.R")
file.edit("R_conditionals.R")
file.edit("Ricker.R")
file.edit("Ricker.R")
file.edit("Sample.R")
file.edit("TAutoCorr.R")
file.edit("TreeHeight.R")
file.edit("Try.R")
file.edit("Vectorize1.R")
file.edit("Vectorize2.R")
file.edit("PP_Regress.R")
file.edit("../Sandbox/tmp.R")
MyDF <- as.data.frame(read.csv("../Data/EcolArchives-E089-51-D1.csv"))
f_val <- anova(lm(log10(Predator.mass) ~ log10(Prey.mass), data = MyDF))$`F value`[1]
f_val
file.edit("TAutoCorr.R")
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/TAutoCorr.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/TAutoCorr.R', echo=TRUE)
# plot T vs T-1
plot(ats$Temp[-1],ats$Temp[-nrow(ats)],
xlab = "Temperature in year n",
ylab = "Temperature in year n - 1")
# plot T vs T-1
plot(ats$Temp[-nrow(ats), ats$Temp[-1]],
xlab = "Temperature in year n",
ylab = "Temperature in year n + 1")
# plot T vs T-1
plot(ats$Temp[-nrow(ats)], ats$Temp[-1],
xlab = "Temperature in year n",
ylab = "Temperature in year n + 1")
model <- lm(ats$Temp[-nrow(ats)] ~ ats$Temp[-1])
abline(model$coefficients[1], model$coefficients[2])
summary(model)
abline(model$coefficients[1], model$coefficients[2],
col = "red")
# plot T vs T-1
plot(ats$Temp[-nrow(ats)], ats$Temp[-1],
xlab = "Temperature in year n (Celcius)",
ylab = "Temperature in year n + 1 (Celcius)")
model <- lm(ats$Temp[-nrow(ats)] ~ ats$Temp[-1])
abline(model$coefficients[1], model$coefficients[2],
col = "red")
# plot T vs T-1
plot(ats$Temp[-nrow(ats)], ats$Temp[-1],
xlab = "Temperature in year n (Celcius)",
ylab = "Temperature in year n + 1 (Celcius)",
pch = 16)
model <- lm(ats$Temp[-nrow(ats)] ~ ats$Temp[-1])
abline(model$coefficients[1], model$coefficients[2],
col = "red")
# plot Years vs Temp
plot(ats$Year, ats$Temp,
xlab = "Year",
ylab = "Temperature",
pch = 16,
ylim = c(23.5, 26.5))
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/TAutoCorr.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/TAutoCorr.R', echo=TRUE)
#set a seed so results are reproducible
set.seed(75)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/TAutoCorr.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/TAutoCorr.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Week3/Code/TAutoCorr.R', echo=TRUE)
getwd()
setwd("../../Miniproject/Exercises/NLmodel_fitting_traits.R")
setwd("../../Miniproject/Exercises")
file.edit("NLmodel_fitting_traits.R")
file.edit("NLmodel_fitting_abundance.R")
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Miniproject/Exercises/NLmodel_fitting_abundance.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Miniproject/Exercises/NLmodel_fitting_abundance.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Miniproject/Exercises/NLmodel_fitting_abundance.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Miniproject/Exercises/NLmodel_fitting_abundance.R', echo=TRUE)
#packages
require(ggplot2)
require(minpack.lm)
rm(list=ls())
# Generate data - a bacterial population over time
t <- seq(0, 22, 2)
N <- c(32500, 33000, 38000, 105000, 445000, 1430000, 3020000, 4720000, 5670000, 5870000, 5930000, 5940000)
set.seed(1234) #set seed to ensure get the same random sequence
data <- data.frame(t, N + rnorm(length(time), sd = 0.1)) #add some random error
names(data) <- c("Time", "N")
head(data)
#plot the data
ggplot(data, aes(x = Time, y = N)) +
geom_point(size = 3) +
labs(x = "Time (Hours)", y = "Population size (cells)")
require(ggplot2)
require(ggplot2)
#plot the data
ggplot(data, aes(x = Time, y = N)) +
geom_point(size = 3) +
labs(x = "Time (Hours)", y = "Population size (cells)")
library(ggplot2)
library(minpack.lm)
#plot the data
ggplot(data, aes(x = Time, y = N)) +
geom_point(size = 3) +
labs(x = "Time (Hours)", y = "Population size (cells)")
names(data) <- c("Time", "N")
View(data)
dev.off()
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Miniproject/Exercises/NLmodel_fitting_abundance.R', echo=TRUE)
#plot the data
ggplot(data, aes(x = Time, y = N)) +
geom_point(size = 3) +
labs(x = "Time (Hours)", y = "Population size (cells)")
