trajectory[1]
bum_I
num_I
trajectory[1]
infection_rate <- beta * I * S / N
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
# delete everything
rm(list=ls(all=TRUE))
# import library for implementing Gillespie's algorithm
require(adaptivetau)
require(deSolve)
#SET TIMEFRAME FOR MODEL
t <- 0 #start time
tf <- 10
time_points <- seq(0, tf, by = 0.5)
num_runs <- 10
#SET INITIAL STATES AND PARAMETERS
num_S <- 9999
num_I <- 1
num_R <- 0
beta <- 2 #infection rate
mu = 1 #recovery rate
N <- num_S + num_I + num_R #total population
#FUNCTION TO IMPLEMENT GILLESPIE ALGORITHM AND RETURN NUMBERS OF S, I, R AT TIMEPOINTS
run_simulation <- function(t, tf, num_I, num_S, num_R, N, beta, mu) {
S <- num_S
I <- num_I
R <- num_R
S_vals <- c(S)
I_vals <- c(I)
R_vals <- c(R)
time <- c(t)
while (t < tf) {
if (I == 0) {
break
}
infection_rate <- beta * I * S / N
recovery_rate <- mu * I
total_rate <- infection_rate + recovery_rate
dt <- -log(runif(1, min=0, max=1)) / total_rate
t = t + dt
if (runif(1, min=0, max=1) < infection_rate / total_rate) {
I <- I + 1
S <- S - 1
}
else {
I <- I - 1
R <- R + 1
}
S_vals <- c(S_vals, S)
I_vals <- c(I_vals, I)
R_vals <- c(R_vals, R)
time <- c(time, t)
}
run_df <- data.frame(time, S_vals, I_vals, R_vals)
#find S, I and R levels at set times and put in data frame to return from function
run.I.times <- approx(x = run_df$time,
y = run_df$I_vals,
xout = time_points,
method = "constant")
run.I.times.df <- data.frame(run.I.times[1], run.I.times[2])
colnames(run.I.times.df) <- c("time", "num_infected")
run.S.times <- approx(x = run_df$time,
y = run_df$S_vals,
xout = time_points,
method = "constant")
run.S.times.df <- data.frame(run.S.times[1], run.S.times[2])
colnames(run.S.times.df) <- c("time", "num_susceptible")
run.R.times <- approx(x = run_df$time,
y = run_df$R_vals,
xout = time_points,
method = "constant")
run.R.times.df <- data.frame(run.R.times[1], run.R.times[2])
colnames(run.R.times.df) <- c("time", "num_recovered")
return(list(run.I.times.df, run.S.times.df, run.R.times.df))
}
trajectory <- run_simulation(t, tf, num_I, num_S, num_R, N, beta, mu)
View(trajectory)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
trajectory <- run_simulation(t, tf, num_I, num_S, num_R, N, beta, mu)
run_df <- data.frame(time, S_vals, I_vals, R_vals)
View(run_df)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
time_points <- seq(0, tf, by = 0.5)
time_points <- seq(0, tf, by = 0.5)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
# delete everything
rm(list=ls(all=TRUE))
# delete everything
rm(list=ls(all=TRUE))
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
run_df <- data.frame(time, S_vals, I_vals, R_vals)
?approx
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
View(run.I.times)
View(trajectory)
View(trajectory)
View(I_times)
View(S_times)
View(trajectory)
View(trajectory)
View(run_df)
View(run.I.times)
View(I_simulations)
View(I_simulations)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
View(I_simulations)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
recovery_rate <- mu * I
recovery_rate <- mu * I
recovery_rate <- mu * I
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
debugSource('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic_manual.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SI_model/SI_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SI_model/SI_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SI_model/SI_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SI_model/SI_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SI_model/SI_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SI_model/SI_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SI_model/SI_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SIR_model/SIR_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SI_model/SI_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Stochastic_models/SI_model/SI_stochastic.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
library(flux)
?flux
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
View(trajectory_df)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
View(trajectory_df)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Deterministic_model/2_patch_determ.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Stochastic_model/2_patch_stochast.R', echo=TRUE)
source('~/Dropbox/CAMBRIDGE/Part_2/Project/Two_patch_model/Stochastic_model/2_patch_stochast.R', echo=TRUE)
data = c(1,2,3,4)
data <- list(height = c(1,2,3), length = c(1,2,3))
data
datan <- filter(data, height <2)
datan <- filter(data[1], height <2)
datan <- filter(data[[1]], height <2)
data <- data.base(height = c(1,2,3), length = c(1,2,3))
data <- data.frame(height = c(1,2,3), length = c(1,2,3))
data_f <- filter(data, height <2)
data
data_f <- filter(data$height <2)
head(data)
data$height
data$height <2
filter(data, height <2)
filter(data, data$height <2)
install.packages(dplyr)
install.packages('dplyr')
library(dplyr)
filter(data, height <2)
filter(data, height != 2)
setwd("~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday")
head(d)
d <- read.table(../SparrowSize.txt, header = TRUE)
d <- read.table("../SparrowSize.txt", header = TRUE)
head(d)
head(d[4])
d <- read.table("../SparrowSize.txt", header = TRUE)
d <- subset(d, !d["BirdID"] && !d$Sex.1)
head(d)
d <- subset(d, !d["BirdID"])
d <- subset(d, !d$BirdID)
head(d)
d <- subset(d, select = -c(BirdId, Sex.1))
d <- read.table("../SparrowSize.txt", header = TRUE)
d <- subset(d, select = -c("BirdId", "Sex.1"))
d <- subset(d, select = -c(1, 8))
head(d)
ncol(d)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
debugSource('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
row
row[1]
row[[1]]
d[row]
hist(d[row])
type(d[row])
str(d[row])
hist(as.vector(d[row]))
hist(as.numeric(d[row]))
d$row
d$1
debugSource('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
value
hist(d$Year)
hist(d$Year)
hist(d$Year)
hist(d$Year)
hist(d$Year)
hist(d$Year, breaks = 10)
par(mfrow=c(1,1))
hist(d$Year, breaks = 10)
hist(d$[1], breaks = 10)
hist(d[1], breaks = 10)
d$Year
d[1]
as.vector(d[1])
d$1
names(d)
hist(d$names(d)[1])
yr <- names(d)[1]
hist(d$yr)
unlist(d[1])
hist(unlist(d[1]))
hist(d$Year)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
# par(mfrow=c(1,1))
# hist(d[1], breaks = 10)
# yr <- names(d)[1]
# hist(unlist(d[1]))
# hist(d$Year)
plot(d[row], d[col])
# par(mfrow=c(1,1))
# hist(d[1], breaks = 10)
# yr <- names(d)[1]
# hist(unlist(d[1]))
# hist(d$Year)
plot(value, value)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
par(mfrow=c(1,1))
# hist(d[1], breaks = 10)
# yr <- names(d)[1]
# hist(unlist(d[1]))
# hist(d$Year)
plot(value, value)
have.plotted <- matrix(0, 6,6)
have.plotted
cor(d[1],d[2])
cor(d$Year,d$Tarsus)
head(d$Tarsus)
?cor
str(d$Year)
cor(d$Year,d$Tarsus, na.rm = T)
cor(d$Year,d$Tarsus, na.rm = T)
cor(d)
cor(d$Year,d$Tarsus, use = "complete.obs")
cor(d, use = "complete.obs")
cor(d[1],d[2], use = "complete.obs")
v <- cor(d[1],d[2], use = "complete.obs")
v
v[1]
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
?par
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
create.plot
?text
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
par(mfrow=c(1,1))
plot.new()
text(c(2,3), labels = cor(d$Year,d$Tarsus), cex = 3)
par(mfrow=c(1,1))
plot.new()
text(c(200,300), labels = cor(d$Year,d$Tarsus), cex = 3)
text(c(20,30), labels = cor(d$Year,d$Tarsus), cex = 3)
text("centre", labels = cor(d$Year,d$Tarsus), cex = 3)
?text
par(mfrow=c(1,1))
plot.new()
text(2,3, labels = cor(d$Year,d$Tarsus), cex = 3)
par(mfrow=c(1,1))
plot(1, type="n", xlab="", ylab="", xlim=c(0, 20), ylim=c(0, 20))
text(10,10, labels = cor(d$Year,d$Tarsus), cex = 3)
text(c(10,10), labels = cor(d$Year,d$Tarsus), cex = 3)
par(mfrow=c(1,1))
plot(1, type="n", xlab="", ylab="", xlim=c(0, 20), ylim=c(0, 20))
test <- locator(1)
text(test, labels = cor(d$Year,d$Tarsus), cex = 3)
par(mfrow=c(1,1))
plot(1, type="n", xlab="", ylab="", xlim=c(0, 20), ylim=c(0, 20))
test <- locator(1)
text(test, labels = "cor(d$Year,d$Tarsus)", cex = 3)
par(mfrow=c(1,1))
plot(1, type="n", xlab="", ylab="", xlim=c(0, 20), ylim=c(0, 20))
test <- locator(1)
text  <-cor(d$Year,d$Tarsus)
text(test, labels = text, cex = 3)
text
par(mfrow=c(1,1))
plot(1, type="n", xlab="", ylab="", xlim=c(0, 20), ylim=c(0, 20))
text(10,10, labels = cor(d$Year,d$Tarsus, use = "complete.obs"), cex = 3)
text(10,10, labels = round(cor(d$Year,d$Tarsus, use = "complete.obs"),digits=2), cex = 3)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
source('~/Dropbox/2020-21/_Imperial_MSc/CMEEStatsWeek/Wednesday/correlations_matrix.R', echo=TRUE)
getwd()
setwd("~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Miniproject")
install.packages("minpack.lm")
#### Model fitting using Non-linear least squares #####
require(minpack.lm)
MyData <- read.csv("./Data/GenomeSize.csv")
setwd("~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Miniproject/Exercises")
MyData <- read.csv("./Data/GenomeSize.csv")
head(MyData)
Data2Fit <- subset(MyData, Suborder == "Anisoptera")
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight)
par(mfrow=c(1,1))
source('~/Dropbox/2020-21/_Imperial_MSc/CMEECourseWork/Miniproject/Exercises/NLmodel_fitting.R', echo=TRUE)
library("ggplot2")
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) +
geom_point(size = (3), color = "red") +
theme_bw() +
labs(y = "Body mass (mg)", x = "Wing length (mm)")
#fit model to the data using NLLS
#powMod is function defined earlier that converts to power module
PowFit <- nlsLM(BodyWeight ~ powMod(TotalLength, a, b),
data = Data2Fit,
start = list(a = 0.1, b = 0.1))
?nlsLM
summary(PowFit)
anova(powFit)
#generate vector of body lengths for visualisation
Lengths <- seq(min(Data2Fit$TotalLength),
max(Data2Fit$TotalLength),
len = 200)
anova(PowFit)
#extract coeffs
coef(PowFit)["a"]
coef(PowFit)["b"]
#put actual values of coeffs through formula with Lengths vector giving TotalLength vals
Predic2PlotPow <- powMod(Lenghts, coef(PowFit)["a"], coef(PowFit)["b"])
Lengths <- seq(min(Data2Fit$TotalLength),
max(Data2Fit$TotalLength),
len = 200)
#extract coeffs
coef(PowFit)["a"]
coef(PowFit)["b"]
#put actual values of coeffs through formula with Lengths vector giving TotalLength vals
Predic2P
#generate vector of body lengths for visualisation
Lengths <- seq(min(Data2Fit$TotalLength),
max(Data2Fit$TotalLength),
len = 200)
#extract coeffs
coef(PowFit)["a"]
coef(PowFit)["b"]
#put actual values of coeffs through formula with Lengths vector giving TotalLength vals
Predic2PlotPow <- powMod(Lenghts, coef(PowFit)["a"], coef(PowFit)["b"])
#generate vector of body lengths for visualisation
Lengths <- seq(min(Data2Fit$TotalLength),
max(Data2Fit$TotalLength),
len = 200)
#extract coeffs
coef(PowFit)["a"]
coef(PowFit)["b"]
#put actual values of coeffs through formula with Lengths vector giving TotalLength vals
Predic2PlotPow <- powMod(Lengths, coef(PowFit)["a"], coef(PowFit)["b"])
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight)
#predic2plotpow allows us to plot the model line
lines(Lengths, Predic2PlotPow,
col = 'blue',
lwd = 2.5)
#confidence intervals on estimated params
confint(PowFit)
?poly
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight)
lines(Lengths, Predic2PlotPow,
col = "blue",
lwd = 2.5)
lines(Lengths, Predic2PlotQua,
col = "red",
lwd = 2.5)
QuaFit <- lm(BodyWeight ~ poly(TotalLength, 2)) #poly computes polynomials, 2 = degree (ie x^2)
#use predict.lm to get predicted line of model
Predic2PlotQua <- predict.lm(QuaFit, data.frame(TotaLength = Lengths))
#now plot two different models together
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight)
lines(Lengths, Predic2PlotPow,
col = "blue",
lwd = 2.5)
lines(Lengths, Predic2PlotQua,
col = "red",
lwd = 2.5)
QuaFit <- lm(BodyWeight ~ poly(TotalLength, 2)) #poly computes polynomials, 2 = degree (ie x^2)
#use predict.lm to get predicted line of model
Predic2PlotQua <- predict.lm(QuaFit, data.frame(TotaLength = Lengths))
#now plot two different models together
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight)
lines(Lengths, Predic2PlotPow,
col = "blue",
lwd = 2.5)
lines(Lengths, Predic2PlotQua,
col = "red",
lwd = 2.5)
QuaFit <- lm(BodyWeight ~ poly(TotalLength, 2)) #poly computes polynomials, 2 = degree (ie x^2)
QuaFit <- lm(BodyWeight ~ poly(TotalLength, 2),
data = Data2Fit)) #poly computes polynomials, 2 = degree (ie x^2)
#use predict.lm to get predicted line of model
Predic2PlotQua <- predict.lm(QuaFit, data.frame(TotaLength = Lengths))
#now plot two different models together
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight)
lines(Lengths, Predic2PlotPow,
col = "blue",
lwd = 2.5)
lines(Lengths, Predic2PlotQua,
col = "red",
lwd = 2.5)
QuaFit <- lm(BodyWeight ~ poly(TotalLength, 2),
data = Data2Fit)) #poly computes polynomials, 2 = degree (ie x^2)
QuaFit <- lm(BodyWeight ~ poly(TotalLength, 2),
data = Data2Fit) #poly computes polynomials, 2 = degree (ie x^2)
#use predict.lm to get predicted line of model
Predic2PlotQua <- predict.lm(QuaFit, data.frame(TotaLength = Lengths))
QuaFit <- lm(BodyWeight ~ poly(TotalLength, 2),
data = Data2Fit) #poly computes polynomials, 2 = degree (ie x^2)
#use predict.lm to get predicted line of model
Predic2PlotQua <- predict.lm(QuaFit, data.frame(TotaLength = Lengths))
#use predict.lm to get predicted line of model
Predic2PlotQua <- predict.lm(QuaFit, data.frame(TotalLength = Lengths))
#now plot two different models together
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight)
lines(Lengths, Predic2PlotPow,
col = "blue",
lwd = 2.5)
lines(Lengths, Predic2PlotQua,
col = "red",
lwd = 2.5)
### formal model comparison
#manually calculate R^2 values
RSS_Pow <- sum(residuals(PowFit)^2)  # Residual sum of squares
TSS_Pow <- sum((Data2Fit$BodyWeight - mean(Data2Fit$BodyWeight))^2)  # Total sum of squares
RSq_Pow <- 1 - (RSS_Pow/TSS_Pow)  # R-squared value
RSS_Qua <- sum(residuals(QuaFit)^2)  # Residual sum of squares
TSS_Qua <- sum((Data2Fit$BodyWeight - mean(Data2Fit$BodyWeight))^2)  # Total sum of squares
RSq_Qua <- 1 - (RSS_Qua/TSS_Qua)  # R-squared value
RSq_Pow
RSq_Qua
n <- nrow(Data2Fit) #set sample size
pPow <- length(coef(PowFit)) # get number of parameters in power law model
pQua <- length(coef(QuaFit)) # get number of parameters in quadratic model
AIC_Pow <- n + 2 + n * log((2 * pi) / n) +  n * log(RSS_Pow) + 2 * pPow
AIC_Qua <- n + 2 + n * log((2 * pi) / n) + n * log(RSS_Qua) + 2 * pQua
AIC_Pow - AIC_Qua
#automatically calculate AIC
AIC(PowFit) - AIC(QuaFit)
AIC(PowFit)
AIC(QuaFit)
