#1
wc -l ../Data/E.coli.fasta ../Data/407228326.fasta ../Data/407228412.fasta

# EXPLANATION
# wc = word count
# -l = number of lines (-w is words, -c is characters, if no specification all 3 will be shown)
# filepath needs to leave current directory (Code) and go into Data directory where the files are
# can put multiple files separated by a space, will give individual numbers and a total

#2
tail -n +2 ../Data/E.coli.fasta

# EXPLANATION
# tail = shows the bottom of a file (opposite of 'head')
# -n = indicates to show by lines (rather than characters for example)
# numbers with a leading '+' indicate counting from the beginning of the file ('-' is from the end and is the default)
# therefore '+2' means show all lines starting from the second one, thereby cutting out the first line

#3
tail -n +2 ../Data/E.coli.fasta | tr -d '\n' | wc -c

# EXPLANATION
# first part same as question 2 to ensure the first line not counted (as it's not part of the sequence)
# wc -c counts characters - will give length of sequence

#4
sed '1d' ../Data/E.coli.fasta | tr -d '\n' | grep -o -i 'ATGC' | wc -l

# EXPLANATION
# sed modifies files - 1 = first line, d = delete, it doesn't edit the actual file (need -i to do that)
# tr -d = delete, \n = new line
# grep finds strings, -o = prints only the matching part of the lines (-c doesn't work as only accounts for one ocurrence per line and have removed \n)
# wc -l = count the lines outputted by grep (each match is on a new line)

#5
echo "scale=3;" $(grep -o "A\|T" ../Data/E.coli.fasta | wc -l) / $(grep -o "G\|C" ../Data/E.coli.fasta | wc -l) | bc

# EXPLANATION
# command substitution: the shell will execute what is within $() then pass that to the command (aka echo in this case)
# note that 2 sets of command substitution with a "/" in between that will print as it as and bc (see below) will interpret as divide.
# "scale=3;" = printing this before the calculation means bc gives the answer to 3 decimal places
# "A\|T" = grep searches for all instances of A or T, so resulting wc will be sum of both
# pipe to bc: a command line calculator that reads and executes maths. there must be a \n at the end of the calculation and no \n inside the calculation(s).
